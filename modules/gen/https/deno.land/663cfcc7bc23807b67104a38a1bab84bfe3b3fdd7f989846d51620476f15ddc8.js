// Copyright 2018-2023 the oak authors. All rights reserved. MIT license.
// deno-lint-ignore-file
/** A type guard that returns true if the value is
 * {@linkcode MiddlewareObject}. */ export function isMiddlewareObject(value) {
    return value && typeof value === "object" && "handleRequest" in value;
}
/** Compose multiple middleware functions into a single middleware function. */ export function compose(middleware) {
    return function composedMiddleware(context, next) {
        let index = -1;
        async function dispatch(i) {
            if (i <= index) {
                throw new Error("next() called multiple times.");
            }
            index = i;
            let m = middleware[i];
            let fn;
            if (typeof m === "function") {
                fn = m;
            } else if (m && typeof m.handleRequest === "function") {
                fn = m.handleRequest.bind(m);
            }
            if (i === middleware.length) {
                fn = next;
            }
            if (!fn) {
                return;
            }
            await fn(context, dispatch.bind(null, i + 1));
        }
        return dispatch(0);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvb2FrQHYxMi42LjAvbWlkZGxld2FyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzIHRoZSBvYWsgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZVxuXG5pbXBvcnQgdHlwZSB7IFN0YXRlIH0gZnJvbSBcIi4vYXBwbGljYXRpb24udHNcIjtcbmltcG9ydCB0eXBlIHsgQ29udGV4dCB9IGZyb20gXCIuL2NvbnRleHQudHNcIjtcblxuLyoqIEEgZnVuY3Rpb24gZm9yIGNoYWluaW5nIG1pZGRsZXdhcmUuICovXG5leHBvcnQgdHlwZSBOZXh0ID0gKCkgPT4gUHJvbWlzZTx1bmtub3duPjtcblxuLyoqIE1pZGRsZXdhcmUgYXJlIGZ1bmN0aW9ucyB3aGljaCBhcmUgY2hhaW5lZCB0b2dldGhlciB0byBkZWFsIHdpdGhcbiAqIHJlcXVlc3RzLiAqL1xuZXhwb3J0IGludGVyZmFjZSBNaWRkbGV3YXJlPFxuICBTIGV4dGVuZHMgU3RhdGUgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBUIGV4dGVuZHMgQ29udGV4dCA9IENvbnRleHQ8Uz4sXG4+IHtcbiAgKGNvbnRleHQ6IFQsIG5leHQ6IE5leHQpOiBQcm9taXNlPHVua25vd24+IHwgdW5rbm93bjtcbn1cblxuLyoqIE1pZGRsZXdhcmUgb2JqZWN0cyBhbGxvdyBlbmNhcHN1bGF0aW9uIG9mIG1pZGRsZXdhcmUgYWxvbmcgd2l0aCB0aGUgYWJpbGl0eVxuICogdG8gaW5pdGlhbGl6ZSB0aGUgbWlkZGxld2FyZSB1cG9uIGxpc3Rlbi4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWlkZGxld2FyZU9iamVjdDxcbiAgUyBleHRlbmRzIFN0YXRlID0gUmVjb3JkPHN0cmluZywgYW55PixcbiAgVCBleHRlbmRzIENvbnRleHQ8Uz4gPSBDb250ZXh0PFM+LFxuPiB7XG4gIC8qKiBPcHRpb25hbCBmdW5jdGlvbiBmb3IgZGVsYXllZCBpbml0aWFsaXphdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gICAqIHRoZSBhcHBsaWNhdGlvbiBzdGFydHMgbGlzdGVuaW5nLiAqL1xuICBpbml0PzogKCkgPT4gUHJvbWlzZTx1bmtub3duPiB8IHVua25vd247XG4gIC8qKiBUaGUgbWV0aG9kIHRvIGJlIGNhbGxlZCB0byBoYW5kbGUgdGhlIHJlcXVlc3QuICovXG4gIGhhbmRsZVJlcXVlc3QoY29udGV4dDogVCwgbmV4dDogTmV4dCk6IFByb21pc2U8dW5rbm93bj4gfCB1bmtub3duO1xufVxuXG4vKiogVHlwZSB0aGF0IHJlcHJlc2VudHMge0BsaW5rY29kZSBNaWRkbGV3YXJlfSBvclxuICoge0BsaW5rY29kZSBNaWRkbGV3YXJlT2JqZWN0fS4gKi9cbmV4cG9ydCB0eXBlIE1pZGRsZXdhcmVPck1pZGRsZXdhcmVPYmplY3Q8XG4gIFMgZXh0ZW5kcyBTdGF0ZSA9IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIFQgZXh0ZW5kcyBDb250ZXh0ID0gQ29udGV4dDxTPixcbj4gPSBNaWRkbGV3YXJlPFMsIFQ+IHwgTWlkZGxld2FyZU9iamVjdDxTLCBUPjtcblxuLyoqIEEgdHlwZSBndWFyZCB0aGF0IHJldHVybnMgdHJ1ZSBpZiB0aGUgdmFsdWUgaXNcbiAqIHtAbGlua2NvZGUgTWlkZGxld2FyZU9iamVjdH0uICovXG5leHBvcnQgZnVuY3Rpb24gaXNNaWRkbGV3YXJlT2JqZWN0PFxuICBTIGV4dGVuZHMgU3RhdGUgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBUIGV4dGVuZHMgQ29udGV4dCA9IENvbnRleHQ8Uz4sXG4+KHZhbHVlOiBNaWRkbGV3YXJlT3JNaWRkbGV3YXJlT2JqZWN0PFMsIFQ+KTogdmFsdWUgaXMgTWlkZGxld2FyZU9iamVjdDxTLCBUPiB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgXCJoYW5kbGVSZXF1ZXN0XCIgaW4gdmFsdWU7XG59XG5cbi8qKiBDb21wb3NlIG11bHRpcGxlIG1pZGRsZXdhcmUgZnVuY3Rpb25zIGludG8gYSBzaW5nbGUgbWlkZGxld2FyZSBmdW5jdGlvbi4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlPFxuICBTIGV4dGVuZHMgU3RhdGUgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBUIGV4dGVuZHMgQ29udGV4dCA9IENvbnRleHQ8Uz4sXG4+KFxuICBtaWRkbGV3YXJlOiBNaWRkbGV3YXJlT3JNaWRkbGV3YXJlT2JqZWN0PFMsIFQ+W10sXG4pOiAoY29udGV4dDogVCwgbmV4dD86IE5leHQpID0+IFByb21pc2U8dW5rbm93bj4ge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcG9zZWRNaWRkbGV3YXJlKFxuICAgIGNvbnRleHQ6IFQsXG4gICAgbmV4dD86IE5leHQsXG4gICk6IFByb21pc2U8dW5rbm93bj4ge1xuICAgIGxldCBpbmRleCA9IC0xO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gZGlzcGF0Y2goaTogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICBpZiAoaSA8PSBpbmRleCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJuZXh0KCkgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlwiKTtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gaTtcbiAgICAgIGxldCBtOiBNaWRkbGV3YXJlT3JNaWRkbGV3YXJlT2JqZWN0PFMsIFQ+IHwgdW5kZWZpbmVkID0gbWlkZGxld2FyZVtpXTtcbiAgICAgIGxldCBmbjogTWlkZGxld2FyZTxTLCBUPiB8IHVuZGVmaW5lZDtcbiAgICAgIGlmICh0eXBlb2YgbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGZuID0gbTtcbiAgICAgIH0gZWxzZSBpZiAobSAmJiB0eXBlb2YgbS5oYW5kbGVSZXF1ZXN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZm4gPSAobSBhcyBNaWRkbGV3YXJlT2JqZWN0KS5oYW5kbGVSZXF1ZXN0LmJpbmQobSk7XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbWlkZGxld2FyZS5sZW5ndGgpIHtcbiAgICAgICAgZm4gPSBuZXh0O1xuICAgICAgfVxuICAgICAgaWYgKCFmbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhd2FpdCBmbihjb250ZXh0LCBkaXNwYXRjaC5iaW5kKG51bGwsIGkgKyAxKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpc3BhdGNoKDApO1xuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlFQUF5RTtBQUV6RSx3QkFBd0I7QUFxQ3hCO2lDQUNpQyxHQUNqQyxPQUFPLFNBQVMsbUJBR2QsS0FBeUM7SUFDekMsT0FBTyxTQUFTLE9BQU8sVUFBVSxZQUFZLG1CQUFtQjtBQUNsRTtBQUVBLDZFQUE2RSxHQUM3RSxPQUFPLFNBQVMsUUFJZCxVQUFnRDtJQUVoRCxPQUFPLFNBQVMsbUJBQ2QsT0FBVSxFQUNWLElBQVc7UUFFWCxJQUFJLFFBQVEsQ0FBQztRQUViLGVBQWUsU0FBUyxDQUFTO1lBQy9CLElBQUksS0FBSyxPQUFPO2dCQUNkLE1BQU0sSUFBSSxNQUFNO1lBQ2xCO1lBQ0EsUUFBUTtZQUNSLElBQUksSUFBb0QsVUFBVSxDQUFDLEVBQUU7WUFDckUsSUFBSTtZQUNKLElBQUksT0FBTyxNQUFNLFlBQVk7Z0JBQzNCLEtBQUs7WUFDUCxPQUFPLElBQUksS0FBSyxPQUFPLEVBQUUsa0JBQWtCLFlBQVk7Z0JBQ3JELEtBQUssQUFBQyxFQUF1QixjQUFjLEtBQUs7WUFDbEQ7WUFDQSxJQUFJLE1BQU0sV0FBVyxRQUFRO2dCQUMzQixLQUFLO1lBQ1A7WUFDQSxJQUFJLENBQUMsSUFBSTtnQkFDUDtZQUNGO1lBQ0EsTUFBTSxHQUFHLFNBQVMsU0FBUyxLQUFLLE1BQU0sSUFBSTtRQUM1QztRQUVBLE9BQU8sU0FBUztJQUNsQjtBQUNGIn0=