// Copyright 2018-2023 the oak authors. All rights reserved. MIT license.
/**
 * A middleware framework for handling HTTP with Deno.
 *
 * oak works well on both Deno CLI and Deno deploy, and is inspired by
 * [koa](https://koajs.com/). It works well with both the Deno CLI and
 * [Deno Deploy](https://deno.com/deploy).
 *
 * ### Example server
 *
 * A minimal router server which responds with content on `/`. With Deno CLI
 * this will listen on port 8080 and on Deploy, this will simply serve requests
 * received on the application.
 *
 * ```ts
 * import { Application, Router } from "https://deno.land/x/oak/mod.ts";
 *
 * const router = new Router();
 * router.get("/", (ctx) => {
 *   ctx.response.body = `<!DOCTYPE html>
 *     <html>
 *       <head><title>Hello oak!</title><head>
 *       <body>
 *         <h1>Hello oak!</h1>
 *       </body>
 *     </html>
 *   `;
 * });
 *
 * const app = new Application();
 * app.use(router.routes());
 * app.use(router.allowedMethods());
 *
 * app.listen({ port: 8080 });
 * ```
 *
 * @module
 */ export { Application } from "./application.ts";
export { Context } from "./context.ts";
export * as helpers from "./helpers.ts";
export * as etag from "./etag.ts";
export { HttpServer as HttpServerNative } from "./http_server_native.ts";
export { proxy } from "./middleware/proxy.ts";
export { compose as composeMiddleware } from "./middleware.ts";
export { FormDataReader } from "./multipart.ts";
export { ifRange, MultiPartStream, parseRange } from "./range.ts";
export { Request } from "./request.ts";
export { REDIRECT_BACK, Response } from "./response.ts";
export { Router } from "./router.ts";
export { send } from "./send.ts";
/** Utilities for making testing oak servers easier. */ export * as testing from "./testing.ts";
// Re-exported from `std/http`
export { createHttpError, errors as httpErrors, HttpError, isErrorStatus, isHttpError, isRedirectStatus, SecureCookieMap as Cookies, ServerSentEvent, Status, STATUS_TEXT } from "./deps.ts";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvb2FrQHYxMi42LjAvbW9kLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMgdGhlIG9hayBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cblxuLyoqXG4gKiBBIG1pZGRsZXdhcmUgZnJhbWV3b3JrIGZvciBoYW5kbGluZyBIVFRQIHdpdGggRGVuby5cbiAqXG4gKiBvYWsgd29ya3Mgd2VsbCBvbiBib3RoIERlbm8gQ0xJIGFuZCBEZW5vIGRlcGxveSwgYW5kIGlzIGluc3BpcmVkIGJ5XG4gKiBba29hXShodHRwczovL2tvYWpzLmNvbS8pLiBJdCB3b3JrcyB3ZWxsIHdpdGggYm90aCB0aGUgRGVubyBDTEkgYW5kXG4gKiBbRGVubyBEZXBsb3ldKGh0dHBzOi8vZGVuby5jb20vZGVwbG95KS5cbiAqXG4gKiAjIyMgRXhhbXBsZSBzZXJ2ZXJcbiAqXG4gKiBBIG1pbmltYWwgcm91dGVyIHNlcnZlciB3aGljaCByZXNwb25kcyB3aXRoIGNvbnRlbnQgb24gYC9gLiBXaXRoIERlbm8gQ0xJXG4gKiB0aGlzIHdpbGwgbGlzdGVuIG9uIHBvcnQgODA4MCBhbmQgb24gRGVwbG95LCB0aGlzIHdpbGwgc2ltcGx5IHNlcnZlIHJlcXVlc3RzXG4gKiByZWNlaXZlZCBvbiB0aGUgYXBwbGljYXRpb24uXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IEFwcGxpY2F0aW9uLCBSb3V0ZXIgfSBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQveC9vYWsvbW9kLnRzXCI7XG4gKlxuICogY29uc3Qgcm91dGVyID0gbmV3IFJvdXRlcigpO1xuICogcm91dGVyLmdldChcIi9cIiwgKGN0eCkgPT4ge1xuICogICBjdHgucmVzcG9uc2UuYm9keSA9IGA8IURPQ1RZUEUgaHRtbD5cbiAqICAgICA8aHRtbD5cbiAqICAgICAgIDxoZWFkPjx0aXRsZT5IZWxsbyBvYWshPC90aXRsZT48aGVhZD5cbiAqICAgICAgIDxib2R5PlxuICogICAgICAgICA8aDE+SGVsbG8gb2FrITwvaDE+XG4gKiAgICAgICA8L2JvZHk+XG4gKiAgICAgPC9odG1sPlxuICogICBgO1xuICogfSk7XG4gKlxuICogY29uc3QgYXBwID0gbmV3IEFwcGxpY2F0aW9uKCk7XG4gKiBhcHAudXNlKHJvdXRlci5yb3V0ZXMoKSk7XG4gKiBhcHAudXNlKHJvdXRlci5hbGxvd2VkTWV0aG9kcygpKTtcbiAqXG4gKiBhcHAubGlzdGVuKHsgcG9ydDogODA4MCB9KTtcbiAqIGBgYFxuICpcbiAqIEBtb2R1bGVcbiAqL1xuXG5leHBvcnQgeyBBcHBsaWNhdGlvbiB9IGZyb20gXCIuL2FwcGxpY2F0aW9uLnRzXCI7XG5leHBvcnQgdHlwZSB7XG4gIEFwcGxpY2F0aW9uT3B0aW9ucyxcbiAgTGlzdGVuT3B0aW9ucyxcbiAgTGlzdGVuT3B0aW9uc0Jhc2UsXG4gIExpc3Rlbk9wdGlvbnNUbHMsXG4gIFN0YXRlLFxufSBmcm9tIFwiLi9hcHBsaWNhdGlvbi50c1wiO1xuZXhwb3J0IHR5cGUge1xuICBCb2R5Qnl0ZXMsXG4gIEJvZHlDb250ZW50VHlwZXMsXG4gIEJvZHlGb3JtLFxuICBCb2R5Rm9ybURhdGEsXG4gIEJvZHlKc29uLFxuICBCb2R5T3B0aW9ucyxcbiAgQm9keU9wdGlvbnNDb250ZW50VHlwZXMsXG4gIEJvZHlSZWFkZXIsXG4gIEJvZHlTdHJlYW0sXG4gIEJvZHlUZXh0LFxuICBCb2R5VHlwZSxcbiAgQm9keVVuZGVmaW5lZCxcbn0gZnJvbSBcIi4vYm9keS50c1wiO1xuZXhwb3J0IHsgQ29udGV4dCwgdHlwZSBDb250ZXh0U2VuZE9wdGlvbnMgfSBmcm9tIFwiLi9jb250ZXh0LnRzXCI7XG5leHBvcnQgKiBhcyBoZWxwZXJzIGZyb20gXCIuL2hlbHBlcnMudHNcIjtcbmV4cG9ydCAqIGFzIGV0YWcgZnJvbSBcIi4vZXRhZy50c1wiO1xuZXhwb3J0IHsgSHR0cFNlcnZlciBhcyBIdHRwU2VydmVyTmF0aXZlIH0gZnJvbSBcIi4vaHR0cF9zZXJ2ZXJfbmF0aXZlLnRzXCI7XG5leHBvcnQgeyB0eXBlIE5hdGl2ZVJlcXVlc3QgfSBmcm9tIFwiLi9odHRwX3NlcnZlcl9uYXRpdmVfcmVxdWVzdC50c1wiO1xuZXhwb3J0IHsgcHJveHkgfSBmcm9tIFwiLi9taWRkbGV3YXJlL3Byb3h5LnRzXCI7XG5leHBvcnQgdHlwZSB7IFByb3h5T3B0aW9ucyB9IGZyb20gXCIuL21pZGRsZXdhcmUvcHJveHkudHNcIjtcbmV4cG9ydCB7IGNvbXBvc2UgYXMgY29tcG9zZU1pZGRsZXdhcmUgfSBmcm9tIFwiLi9taWRkbGV3YXJlLnRzXCI7XG5leHBvcnQgdHlwZSB7XG4gIE1pZGRsZXdhcmUsXG4gIE1pZGRsZXdhcmVPYmplY3QsXG4gIE1pZGRsZXdhcmVPck1pZGRsZXdhcmVPYmplY3QsXG4gIE5leHQsXG59IGZyb20gXCIuL21pZGRsZXdhcmUudHNcIjtcbmV4cG9ydCB7IEZvcm1EYXRhUmVhZGVyIH0gZnJvbSBcIi4vbXVsdGlwYXJ0LnRzXCI7XG5leHBvcnQgdHlwZSB7XG4gIEZvcm1EYXRhQm9keSxcbiAgRm9ybURhdGFGaWxlLFxuICBGb3JtRGF0YVJlYWRPcHRpb25zLFxufSBmcm9tIFwiLi9tdWx0aXBhcnQudHNcIjtcbmV4cG9ydCB7IGlmUmFuZ2UsIE11bHRpUGFydFN0cmVhbSwgcGFyc2VSYW5nZSB9IGZyb20gXCIuL3JhbmdlLnRzXCI7XG5leHBvcnQgdHlwZSB7IEJ5dGVSYW5nZSB9IGZyb20gXCIuL3JhbmdlLnRzXCI7XG5leHBvcnQgeyBSZXF1ZXN0IH0gZnJvbSBcIi4vcmVxdWVzdC50c1wiO1xuZXhwb3J0IHsgUkVESVJFQ1RfQkFDSywgUmVzcG9uc2UgfSBmcm9tIFwiLi9yZXNwb25zZS50c1wiO1xuZXhwb3J0IHsgUm91dGVyIH0gZnJvbSBcIi4vcm91dGVyLnRzXCI7XG5leHBvcnQgdHlwZSB7XG4gIFJvdXRlLFxuICBSb3V0ZVBhcmFtcyxcbiAgUm91dGVyQWxsb3dlZE1ldGhvZHNPcHRpb25zLFxuICBSb3V0ZXJDb250ZXh0LFxuICBSb3V0ZXJNaWRkbGV3YXJlLFxuICBSb3V0ZXJPcHRpb25zLFxuICBSb3V0ZXJQYXJhbU1pZGRsZXdhcmUsXG59IGZyb20gXCIuL3JvdXRlci50c1wiO1xuZXhwb3J0IHsgc2VuZCB9IGZyb20gXCIuL3NlbmQudHNcIjtcbmV4cG9ydCB0eXBlIHsgU2VuZE9wdGlvbnMgfSBmcm9tIFwiLi9zZW5kLnRzXCI7XG4vKiogVXRpbGl0aWVzIGZvciBtYWtpbmcgdGVzdGluZyBvYWsgc2VydmVycyBlYXNpZXIuICovXG5leHBvcnQgKiBhcyB0ZXN0aW5nIGZyb20gXCIuL3Rlc3RpbmcudHNcIjtcbmV4cG9ydCB0eXBlIHsgU2VydmVyQ29uc3RydWN0b3IgfSBmcm9tIFwiLi90eXBlcy5kLnRzXCI7XG5cbi8vIFJlLWV4cG9ydGVkIGZyb20gYHN0ZC9odHRwYFxuZXhwb3J0IHtcbiAgY3JlYXRlSHR0cEVycm9yLFxuICBlcnJvcnMgYXMgaHR0cEVycm9ycyxcbiAgdHlwZSBFcnJvclN0YXR1cyxcbiAgSHR0cEVycm9yLFxuICB0eXBlIEhUVFBNZXRob2RzLFxuICBpc0Vycm9yU3RhdHVzLFxuICBpc0h0dHBFcnJvcixcbiAgaXNSZWRpcmVjdFN0YXR1cyxcbiAgdHlwZSBSZWRpcmVjdFN0YXR1cyxcbiAgU2VjdXJlQ29va2llTWFwIGFzIENvb2tpZXMsXG4gIHR5cGUgU2VjdXJlQ29va2llTWFwR2V0T3B0aW9ucyBhcyBDb29raWVzR2V0T3B0aW9ucyxcbiAgdHlwZSBTZWN1cmVDb29raWVNYXBTZXREZWxldGVPcHRpb25zIGFzIENvb2tpZXNTZXREZWxldGVPcHRpb25zLFxuICBTZXJ2ZXJTZW50RXZlbnQsXG4gIHR5cGUgU2VydmVyU2VudEV2ZW50SW5pdCxcbiAgdHlwZSBTZXJ2ZXJTZW50RXZlbnRUYXJnZXQsXG4gIFN0YXR1cyxcbiAgU1RBVFVTX1RFWFQsXG59IGZyb20gXCIuL2RlcHMudHNcIjtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5RUFBeUU7QUFFekU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW9DQyxHQUVELFNBQVMsV0FBVyxRQUFRLG1CQUFtQjtBQXNCL0MsU0FBUyxPQUFPLFFBQWlDLGVBQWU7QUFDaEUsT0FBTyxLQUFLLE9BQU8sTUFBTSxlQUFlO0FBQ3hDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWTtBQUNsQyxTQUFTLGNBQWMsZ0JBQWdCLFFBQVEsMEJBQTBCO0FBRXpFLFNBQVMsS0FBSyxRQUFRLHdCQUF3QjtBQUU5QyxTQUFTLFdBQVcsaUJBQWlCLFFBQVEsa0JBQWtCO0FBTy9ELFNBQVMsY0FBYyxRQUFRLGlCQUFpQjtBQU1oRCxTQUFTLE9BQU8sRUFBRSxlQUFlLEVBQUUsVUFBVSxRQUFRLGFBQWE7QUFFbEUsU0FBUyxPQUFPLFFBQVEsZUFBZTtBQUN2QyxTQUFTLGFBQWEsRUFBRSxRQUFRLFFBQVEsZ0JBQWdCO0FBQ3hELFNBQVMsTUFBTSxRQUFRLGNBQWM7QUFVckMsU0FBUyxJQUFJLFFBQVEsWUFBWTtBQUVqQyxxREFBcUQsR0FDckQsT0FBTyxLQUFLLE9BQU8sTUFBTSxlQUFlO0FBR3hDLDhCQUE4QjtBQUM5QixTQUNFLGVBQWUsRUFDZixVQUFVLFVBQVUsRUFFcEIsU0FBUyxFQUVULGFBQWEsRUFDYixXQUFXLEVBQ1gsZ0JBQWdCLEVBRWhCLG1CQUFtQixPQUFPLEVBRzFCLGVBQWUsRUFHZixNQUFNLEVBQ04sV0FBVyxRQUNOLFlBQVkifQ==