export { promisify } from "./_util/_util_promisify.ts";
export { callbackify } from "./_util/_util_callbackify.ts";
import * as types from "./_util/_util_types.ts";
export { types };
export function isArray(value) {
    return Array.isArray(value);
}
export function isBoolean(value) {
    return typeof value === "boolean" || value instanceof Boolean;
}
export function isNull(value) {
    return value === null;
}
export function isNullOrUndefined(value) {
    return value === null || value === undefined;
}
export function isNumber(value) {
    return typeof value === "number" || value instanceof Number;
}
export function isString(value) {
    return typeof value === "string" || value instanceof String;
}
export function isSymbol(value) {
    return typeof value === "symbol";
}
export function isUndefined(value) {
    return value === undefined;
}
export function isObject(value) {
    return value !== null && typeof value === "object";
}
export function isError(e) {
    return e instanceof Error;
}
export function isFunction(value) {
    return typeof value === "function";
}
export function isRegExp(value) {
    return value instanceof RegExp;
}
export function isPrimitive(value) {
    return value === null || typeof value !== "object" && typeof value !== "function";
}
export function validateIntegerRange(value, name, min = -2147483648, max = 2147483647) {
    // The defaults for min and max correspond to the limits of 32-bit integers.
    if (!Number.isInteger(value)) {
        throw new Error(`${name} must be 'an integer' but was ${value}`);
    }
    if (value < min || value > max) {
        throw new Error(`${name} must be >= ${min} && <= ${max}.  Value was ${value}`);
    }
}
import { _TextDecoder, _TextEncoder } from "./_utils.ts";
export const TextDecoder = _TextDecoder;
export const TextEncoder = _TextEncoder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjYzLjAvbm9kZS91dGlsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IHByb21pc2lmeSB9IGZyb20gXCIuL191dGlsL191dGlsX3Byb21pc2lmeS50c1wiO1xuZXhwb3J0IHsgY2FsbGJhY2tpZnkgfSBmcm9tIFwiLi9fdXRpbC9fdXRpbF9jYWxsYmFja2lmeS50c1wiO1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSBcIi4vX3V0aWwvX3V0aWxfdHlwZXMudHNcIjtcblxuZXhwb3J0IHsgdHlwZXMgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXkodmFsdWU6IHVua25vd24pOiBib29sZWFuIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlOiB1bmtub3duKTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiIHx8IHZhbHVlIGluc3RhbmNlb2YgQm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZTogdW5rbm93bik6IGJvb2xlYW4ge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZCh2YWx1ZTogdW5rbm93bik6IGJvb2xlYW4ge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlOiB1bmtub3duKTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgfHwgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZTogdW5rbm93bik6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWU6IHVua25vd24pOiBib29sZWFuIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzeW1ib2xcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlOiB1bmtub3duKTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsdWU6IHVua25vd24pOiBib29sZWFuIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXJyb3IoZTogdW5rbm93bik6IGJvb2xlYW4ge1xuICByZXR1cm4gZSBpbnN0YW5jZW9mIEVycm9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZTogdW5rbm93bik6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZTogdW5rbm93bik6IGJvb2xlYW4ge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBSZWdFeHA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZTogdW5rbm93bik6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIHZhbHVlID09PSBudWxsIHx8ICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUludGVnZXJSYW5nZShcbiAgdmFsdWU6IG51bWJlcixcbiAgbmFtZTogc3RyaW5nLFxuICBtaW4gPSAtMjE0NzQ4MzY0OCxcbiAgbWF4ID0gMjE0NzQ4MzY0Nyxcbik6IHZvaWQge1xuICAvLyBUaGUgZGVmYXVsdHMgZm9yIG1pbiBhbmQgbWF4IGNvcnJlc3BvbmQgdG8gdGhlIGxpbWl0cyBvZiAzMi1iaXQgaW50ZWdlcnMuXG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSAnYW4gaW50ZWdlcicgYnV0IHdhcyAke3ZhbHVlfWApO1xuICB9XG4gIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGAke25hbWV9IG11c3QgYmUgPj0gJHttaW59ICYmIDw9ICR7bWF4fS4gIFZhbHVlIHdhcyAke3ZhbHVlfWAsXG4gICAgKTtcbiAgfVxufVxuXG5pbXBvcnQgeyBfVGV4dERlY29kZXIsIF9UZXh0RW5jb2RlciB9IGZyb20gXCIuL191dGlscy50c1wiO1xuXG4vKiogVGhlIGdsb2JhbCBUZXh0RGVjb2RlciAqL1xuZXhwb3J0IHR5cGUgVGV4dERlY29kZXIgPSBpbXBvcnQoXCIuL191dGlscy50c1wiKS5fVGV4dERlY29kZXI7XG5leHBvcnQgY29uc3QgVGV4dERlY29kZXIgPSBfVGV4dERlY29kZXI7XG5cbi8qKiBUaGUgZ2xvYmFsIFRleHRFbmNvZGVyICovXG5leHBvcnQgdHlwZSBUZXh0RW5jb2RlciA9IGltcG9ydChcIi4vX3V0aWxzLnRzXCIpLl9UZXh0RW5jb2RlcjtcbmV4cG9ydCBjb25zdCBUZXh0RW5jb2RlciA9IF9UZXh0RW5jb2RlcjtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFNBQVMsUUFBUSw2QkFBNkI7QUFDdkQsU0FBUyxXQUFXLFFBQVEsK0JBQStCO0FBQzNELFlBQVksV0FBVyx5QkFBeUI7QUFFaEQsU0FBUyxLQUFLLEdBQUc7QUFFakIsT0FBTyxTQUFTLFFBQVEsS0FBYztJQUNwQyxPQUFPLE1BQU0sUUFBUTtBQUN2QjtBQUVBLE9BQU8sU0FBUyxVQUFVLEtBQWM7SUFDdEMsT0FBTyxPQUFPLFVBQVUsYUFBYSxpQkFBaUI7QUFDeEQ7QUFFQSxPQUFPLFNBQVMsT0FBTyxLQUFjO0lBQ25DLE9BQU8sVUFBVTtBQUNuQjtBQUVBLE9BQU8sU0FBUyxrQkFBa0IsS0FBYztJQUM5QyxPQUFPLFVBQVUsUUFBUSxVQUFVO0FBQ3JDO0FBRUEsT0FBTyxTQUFTLFNBQVMsS0FBYztJQUNyQyxPQUFPLE9BQU8sVUFBVSxZQUFZLGlCQUFpQjtBQUN2RDtBQUVBLE9BQU8sU0FBUyxTQUFTLEtBQWM7SUFDckMsT0FBTyxPQUFPLFVBQVUsWUFBWSxpQkFBaUI7QUFDdkQ7QUFFQSxPQUFPLFNBQVMsU0FBUyxLQUFjO0lBQ3JDLE9BQU8sT0FBTyxVQUFVO0FBQzFCO0FBRUEsT0FBTyxTQUFTLFlBQVksS0FBYztJQUN4QyxPQUFPLFVBQVU7QUFDbkI7QUFFQSxPQUFPLFNBQVMsU0FBUyxLQUFjO0lBQ3JDLE9BQU8sVUFBVSxRQUFRLE9BQU8sVUFBVTtBQUM1QztBQUVBLE9BQU8sU0FBUyxRQUFRLENBQVU7SUFDaEMsT0FBTyxhQUFhO0FBQ3RCO0FBRUEsT0FBTyxTQUFTLFdBQVcsS0FBYztJQUN2QyxPQUFPLE9BQU8sVUFBVTtBQUMxQjtBQUVBLE9BQU8sU0FBUyxTQUFTLEtBQWM7SUFDckMsT0FBTyxpQkFBaUI7QUFDMUI7QUFFQSxPQUFPLFNBQVMsWUFBWSxLQUFjO0lBQ3hDLE9BQ0UsVUFBVSxRQUFTLE9BQU8sVUFBVSxZQUFZLE9BQU8sVUFBVTtBQUVyRTtBQUVBLE9BQU8sU0FBUyxxQkFDZCxLQUFhLEVBQ2IsSUFBWSxFQUNaLE1BQU0sQ0FBQyxVQUFVLEVBQ2pCLE1BQU0sVUFBVTtJQUVoQiw0RUFBNEU7SUFDNUUsSUFBSSxDQUFDLE9BQU8sVUFBVSxRQUFRO1FBQzVCLE1BQU0sSUFBSSxNQUFNLENBQUMsRUFBRSxLQUFLLDhCQUE4QixFQUFFLE1BQU0sQ0FBQztJQUNqRTtJQUNBLElBQUksUUFBUSxPQUFPLFFBQVEsS0FBSztRQUM5QixNQUFNLElBQUksTUFDUixDQUFDLEVBQUUsS0FBSyxZQUFZLEVBQUUsSUFBSSxPQUFPLEVBQUUsSUFBSSxhQUFhLEVBQUUsTUFBTSxDQUFDO0lBRWpFO0FBQ0Y7QUFFQSxTQUFTLFlBQVksRUFBRSxZQUFZLFFBQVEsY0FBYztBQUl6RCxPQUFPLE1BQU0sY0FBYyxhQUFhO0FBSXhDLE9BQU8sTUFBTSxjQUFjLGFBQWEifQ==