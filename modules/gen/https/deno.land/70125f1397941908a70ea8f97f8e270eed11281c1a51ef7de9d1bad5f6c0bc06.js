// Copyright 2018-2020 the oak_logger authors. All rights reserved. MIT license.
import { green, cyan, red, yellow } from "https://deno.land/std@0.53.0/fmt/colors.ts";
import { format } from "https://deno.land/std/datetime/mod.ts";
let X_RESPONSE_TIME = "X-Response-Time";
let User_Agent = "User-Agent";
/** The standard logging function that processes and logs requests. */ const logger = async ({ response , request  }, next)=>{
    await next();
    const responseTime = response.headers.get(X_RESPONSE_TIME);
    const User = request.headers.get(User_Agent);
    const status = response.status;
    const log_string = `[${format(new Date(Date.now()), "MM-dd-yyyy hh:mm:ss.SSS")}  Oak::logger] ${request.ip} "${request.method} ${request.url.pathname}" ${String(status)} ${User} ${responseTime}`;
    var color = status >= 500 ? console.log(`${red(log_string)}`) // red
     : status >= 400 ? console.log(`${yellow(log_string)}`) // yellow
     : status >= 300 ? console.log(`${cyan(log_string)}`) // cyan
     : status >= 200 ? console.log(`${green(log_string)}`) // green
     : console.log(`${red(log_string)}`);
};
/** Response time calculator that also adds response time header. */ const responseTime = async ({ response  }, next)=>{
    const start = Date.now();
    await next();
    const ms = Date.now() - start;
    response.headers.set(X_RESPONSE_TIME, `${ms}ms`);
};
export default {
    logger,
    responseTime
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvb2FrX2xvZ2dlckAxLjAuMC9tb2QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMCB0aGUgb2FrX2xvZ2dlciBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cblxuaW1wb3J0IHtcbiAgZ3JlZW4sXG4gIGN5YW4sXG4gIHJlZCxcbiAgeWVsbG93LFxufSBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQvc3RkQDAuNTMuMC9mbXQvY29sb3JzLnRzXCI7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQvc3RkL2RhdGV0aW1lL21vZC50c1wiO1xubGV0IFhfUkVTUE9OU0VfVElNRTogc3RyaW5nID0gXCJYLVJlc3BvbnNlLVRpbWVcIjtcbmxldCBVc2VyX0FnZW50OiBzdHJpbmcgPSBcIlVzZXItQWdlbnRcIjtcblxuLyoqIFRoZSBzdGFuZGFyZCBsb2dnaW5nIGZ1bmN0aW9uIHRoYXQgcHJvY2Vzc2VzIGFuZCBsb2dzIHJlcXVlc3RzLiAqL1xuY29uc3QgbG9nZ2VyID0gYXN5bmMgKFxuICB7IHJlc3BvbnNlLCByZXF1ZXN0IH06IHsgcmVzcG9uc2U6IGFueTsgcmVxdWVzdDogYW55IH0sXG4gIG5leHQ6IEZ1bmN0aW9uLFxuKSA9PiB7XG4gIGF3YWl0IG5leHQoKTtcbiAgY29uc3QgcmVzcG9uc2VUaW1lID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoWF9SRVNQT05TRV9USU1FKTtcbiAgY29uc3QgVXNlciA9IHJlcXVlc3QuaGVhZGVycy5nZXQoVXNlcl9BZ2VudCk7XG4gIGNvbnN0IHN0YXR1czogbnVtYmVyID0gcmVzcG9uc2Uuc3RhdHVzO1xuICBjb25zdCBsb2dfc3RyaW5nOiBzdHJpbmcgPSBgWyR7XG4gICAgZm9ybWF0KG5ldyBEYXRlKERhdGUubm93KCkpLCBcIk1NLWRkLXl5eXkgaGg6bW06c3MuU1NTXCIpXG4gIH0gIE9hazo6bG9nZ2VyXSAke3JlcXVlc3QuaXB9IFwiJHtyZXF1ZXN0Lm1ldGhvZH0gJHtyZXF1ZXN0LnVybC5wYXRobmFtZX1cIiAke1xuICAgIFN0cmluZyhzdGF0dXMpXG4gIH0gJHtVc2VyfSAke3Jlc3BvbnNlVGltZX1gO1xuICB2YXIgY29sb3IgPSBzdGF0dXMgPj0gNTAwXG4gICAgPyBjb25zb2xlLmxvZyhgJHtyZWQobG9nX3N0cmluZyl9YCkgLy8gcmVkXG4gICAgOiBzdGF0dXMgPj0gNDAwXG4gICAgPyBjb25zb2xlLmxvZyhgJHt5ZWxsb3cobG9nX3N0cmluZyl9YCkgLy8geWVsbG93XG4gICAgOiBzdGF0dXMgPj0gMzAwXG4gICAgPyBjb25zb2xlLmxvZyhgJHtjeWFuKGxvZ19zdHJpbmcpfWApIC8vIGN5YW5cbiAgICA6IHN0YXR1cyA+PSAyMDBcbiAgICA/IGNvbnNvbGUubG9nKGAke2dyZWVuKGxvZ19zdHJpbmcpfWApIC8vIGdyZWVuXG4gICAgOiBjb25zb2xlLmxvZyhgJHtyZWQobG9nX3N0cmluZyl9YCk7XG59O1xuXG4vKiogUmVzcG9uc2UgdGltZSBjYWxjdWxhdG9yIHRoYXQgYWxzbyBhZGRzIHJlc3BvbnNlIHRpbWUgaGVhZGVyLiAqL1xuY29uc3QgcmVzcG9uc2VUaW1lID0gYXN5bmMgKFxuICB7IHJlc3BvbnNlIH06IHsgcmVzcG9uc2U6IGFueSB9LFxuICBuZXh0OiBGdW5jdGlvbixcbikgPT4ge1xuICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gIGF3YWl0IG5leHQoKTtcbiAgY29uc3QgbXM6IG51bWJlciA9IERhdGUubm93KCkgLSBzdGFydDtcbiAgcmVzcG9uc2UuaGVhZGVycy5zZXQoWF9SRVNQT05TRV9USU1FLCBgJHttc31tc2ApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeyBsb2dnZXIsIHJlc3BvbnNlVGltZSB9O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdGQUFnRjtBQUVoRixTQUNFLEtBQUssRUFDTCxJQUFJLEVBQ0osR0FBRyxFQUNILE1BQU0sUUFDRCw2Q0FBNkM7QUFDcEQsU0FBUyxNQUFNLFFBQVEsd0NBQXdDO0FBQy9ELElBQUksa0JBQTBCO0FBQzlCLElBQUksYUFBcUI7QUFFekIsb0VBQW9FLEdBQ3BFLE1BQU0sU0FBUyxPQUNiLEVBQUUsU0FBUSxFQUFFLFFBQU8sRUFBbUMsRUFDdEQ7SUFFQSxNQUFNO0lBQ04sTUFBTSxlQUFlLFNBQVMsUUFBUSxJQUFJO0lBQzFDLE1BQU0sT0FBTyxRQUFRLFFBQVEsSUFBSTtJQUNqQyxNQUFNLFNBQWlCLFNBQVM7SUFDaEMsTUFBTSxhQUFxQixDQUFDLENBQUMsRUFDM0IsT0FBTyxJQUFJLEtBQUssS0FBSyxRQUFRLDJCQUM5QixlQUFlLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxRQUFRLE9BQU8sQ0FBQyxFQUFFLFFBQVEsSUFBSSxTQUFTLEVBQUUsRUFDeEUsT0FBTyxRQUNSLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxhQUFhLENBQUM7SUFDMUIsSUFBSSxRQUFRLFVBQVUsTUFDbEIsUUFBUSxJQUFJLENBQUMsRUFBRSxJQUFJLFlBQVksQ0FBQyxFQUFFLE1BQU07T0FDeEMsVUFBVSxNQUNWLFFBQVEsSUFBSSxDQUFDLEVBQUUsT0FBTyxZQUFZLENBQUMsRUFBRSxTQUFTO09BQzlDLFVBQVUsTUFDVixRQUFRLElBQUksQ0FBQyxFQUFFLEtBQUssWUFBWSxDQUFDLEVBQUUsT0FBTztPQUMxQyxVQUFVLE1BQ1YsUUFBUSxJQUFJLENBQUMsRUFBRSxNQUFNLFlBQVksQ0FBQyxFQUFFLFFBQVE7T0FDNUMsUUFBUSxJQUFJLENBQUMsRUFBRSxJQUFJLFlBQVksQ0FBQztBQUN0QztBQUVBLGtFQUFrRSxHQUNsRSxNQUFNLGVBQWUsT0FDbkIsRUFBRSxTQUFRLEVBQXFCLEVBQy9CO0lBRUEsTUFBTSxRQUFRLEtBQUs7SUFDbkIsTUFBTTtJQUNOLE1BQU0sS0FBYSxLQUFLLFFBQVE7SUFDaEMsU0FBUyxRQUFRLElBQUksaUJBQWlCLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNqRDtBQUVBLGVBQWU7SUFBRTtJQUFRO0FBQWEsRUFBRSJ9