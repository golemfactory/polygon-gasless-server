import _queryString from '/npm:query-string@5!cjs';
import _urlSetQuery from '/npm:url-set-query@1!cjs';
import _objectAssign from '/npm:object-assign@4!cjs';
import '/npm:xhr@2!cjs';
import _request from './npm:xhr-request@1.1.0/lib/request.js!cjs';

var exports = {};
exports = ensureHeader;

function ensureHeader(headers, key, value) {
  var lower = key.toLowerCase();

  if (!headers[key] && !headers[lower]) {
    headers[key] = value;
  }
}

var _ensureHeader = exports;

var exports$1 = {};
var queryString = _queryString;
var setQuery = _urlSetQuery;
var assign = _objectAssign;
var ensureHeader$1 = _ensureHeader; // this is replaced in the browser

var request = _request;
var mimeTypeJson = "application/json";

var noop = function () {};

exports$1 = xhrRequest;

function xhrRequest(url, opt, cb) {
  if (!url || typeof url !== "string") {
    throw new TypeError("must specify a URL");
  }

  if (typeof opt === "function") {
    cb = opt;
    opt = {};
  }

  if (cb && typeof cb !== "function") {
    throw new TypeError("expected cb to be undefined or a function");
  }

  cb = cb || noop;
  opt = opt || {};
  var defaultResponse = opt.json ? "json" : "text";
  opt = assign({
    responseType: defaultResponse
  }, opt);
  var headers = opt.headers || {};
  var method = (opt.method || "GET").toUpperCase();
  var query = opt.query;

  if (query) {
    if (typeof query !== "string") {
      query = queryString.stringify(query);
    }

    url = setQuery(url, query);
  } // allow json response


  if (opt.responseType === "json") {
    ensureHeader$1(headers, "Accept", mimeTypeJson);
  } // if body content is json


  if (opt.json && method !== "GET" && method !== "HEAD") {
    ensureHeader$1(headers, "Content-Type", mimeTypeJson);
    opt.body = JSON.stringify(opt.body);
  }

  opt.method = method;
  opt.url = url;
  opt.headers = headers;
  delete opt.query;
  delete opt.json;
  return request(opt, cb);
}

var exports$2 = exports$1;

export default exports$2;

//# sourceMappingURL=npm:xhr-request@1.1.0!cjs.map