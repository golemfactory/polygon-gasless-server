import _inherits from '/npm:inherits@2!cjs';
import _safeBuffer from '/npm:safe-buffer@5!cjs';
import { _ as _hash } from './npm:sha.js@2.4.11/_/c75f0f87.js';
import _sha2 from './npm:sha.js@2.4.11/sha1!cjs';
import _sha4 from './npm:sha.js@2.4.11/sha256!cjs';
import _sha6 from './npm:sha.js@2.4.11/sha512!cjs';

var _global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;

var exports = {};

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */
var inherits = _inherits;
var Hash = _hash;
var Buffer = _safeBuffer.Buffer;
var K = [1518500249, 1859775393, 2400959708 | 0, 3395469782 | 0];
var W = new Array(80);

function Sha() {
  this.init();
  (this || _global)._w = W;
  Hash.call(this || _global, 64, 56);
}

inherits(Sha, Hash);

Sha.prototype.init = function () {
  (this || _global)._a = 1732584193;
  (this || _global)._b = 4023233417;
  (this || _global)._c = 2562383102;
  (this || _global)._d = 271733878;
  (this || _global)._e = 3285377520;
  return this || _global;
};

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha.prototype._update = function (M) {
  var W = (this || _global)._w;
  var a = (this || _global)._a | 0;
  var b = (this || _global)._b | 0;
  var c = (this || _global)._c | 0;
  var d = (this || _global)._d | 0;
  var e = (this || _global)._e | 0;

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);

  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  (this || _global)._a = a + (this || _global)._a | 0;
  (this || _global)._b = b + (this || _global)._b | 0;
  (this || _global)._c = c + (this || _global)._c | 0;
  (this || _global)._d = d + (this || _global)._d | 0;
  (this || _global)._e = e + (this || _global)._e | 0;
};

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20);
  H.writeInt32BE((this || _global)._a | 0, 0);
  H.writeInt32BE((this || _global)._b | 0, 4);
  H.writeInt32BE((this || _global)._c | 0, 8);
  H.writeInt32BE((this || _global)._d | 0, 12);
  H.writeInt32BE((this || _global)._e | 0, 16);
  return H;
};

exports = Sha;
var _sha = exports;

var _global$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;

var exports$1 = {};

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */
var inherits$1 = _inherits;
var Sha256 = _sha4;
var Hash$1 = _hash;
var Buffer$1 = _safeBuffer.Buffer;
var W$1 = new Array(64);

function Sha224() {
  this.init();
  (this || _global$1)._w = W$1; // new Array(64)

  Hash$1.call(this || _global$1, 64, 56);
}

inherits$1(Sha224, Sha256);

Sha224.prototype.init = function () {
  (this || _global$1)._a = 3238371032;
  (this || _global$1)._b = 914150663;
  (this || _global$1)._c = 812702999;
  (this || _global$1)._d = 4144912697;
  (this || _global$1)._e = 4290775857;
  (this || _global$1)._f = 1750603025;
  (this || _global$1)._g = 1694076839;
  (this || _global$1)._h = 3204075428;
  return this || _global$1;
};

Sha224.prototype._hash = function () {
  var H = Buffer$1.allocUnsafe(28);
  H.writeInt32BE((this || _global$1)._a, 0);
  H.writeInt32BE((this || _global$1)._b, 4);
  H.writeInt32BE((this || _global$1)._c, 8);
  H.writeInt32BE((this || _global$1)._d, 12);
  H.writeInt32BE((this || _global$1)._e, 16);
  H.writeInt32BE((this || _global$1)._f, 20);
  H.writeInt32BE((this || _global$1)._g, 24);
  return H;
};

exports$1 = Sha224;
var _sha3 = exports$1;

var _global$2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;

var exports$2 = {};
var inherits$2 = _inherits;
var SHA512 = _sha6;
var Hash$2 = _hash;
var Buffer$2 = _safeBuffer.Buffer;
var W$2 = new Array(160);

function Sha384() {
  this.init();
  (this || _global$2)._w = W$2;
  Hash$2.call(this || _global$2, 128, 112);
}

inherits$2(Sha384, SHA512);

Sha384.prototype.init = function () {
  (this || _global$2)._ah = 3418070365;
  (this || _global$2)._bh = 1654270250;
  (this || _global$2)._ch = 2438529370;
  (this || _global$2)._dh = 355462360;
  (this || _global$2)._eh = 1731405415;
  (this || _global$2)._fh = 2394180231;
  (this || _global$2)._gh = 3675008525;
  (this || _global$2)._hh = 1203062813;
  (this || _global$2)._al = 3238371032;
  (this || _global$2)._bl = 914150663;
  (this || _global$2)._cl = 812702999;
  (this || _global$2)._dl = 4144912697;
  (this || _global$2)._el = 4290775857;
  (this || _global$2)._fl = 1750603025;
  (this || _global$2)._gl = 1694076839;
  (this || _global$2)._hl = 3204075428;
  return this || _global$2;
};

Sha384.prototype._hash = function () {
  var H = Buffer$2.allocUnsafe(48);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE((this || _global$2)._ah, (this || _global$2)._al, 0);
  writeInt64BE((this || _global$2)._bh, (this || _global$2)._bl, 8);
  writeInt64BE((this || _global$2)._ch, (this || _global$2)._cl, 16);
  writeInt64BE((this || _global$2)._dh, (this || _global$2)._dl, 24);
  writeInt64BE((this || _global$2)._eh, (this || _global$2)._el, 32);
  writeInt64BE((this || _global$2)._fh, (this || _global$2)._fl, 40);
  return H;
};

exports$2 = Sha384;
var _sha5 = exports$2;

var exports$3 = {};
var module = {
  exports: exports$3
};

var exports$3 = module.exports = function SHA(algorithm) {
  algorithm = algorithm.toLowerCase();
  var Algorithm = exports$3[algorithm];
  if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
  return new Algorithm();
};

exports$3.sha = _sha;
exports$3.sha1 = _sha2;
exports$3.sha224 = _sha3;
exports$3.sha256 = _sha4;
exports$3.sha384 = _sha5;
exports$3.sha512 = _sha6;
var index = module.exports;
const sha = module.exports.sha,
      sha1 = module.exports.sha1,
      sha224 = module.exports.sha224,
      sha256 = module.exports.sha256,
      sha384 = module.exports.sha384,
      sha512 = module.exports.sha512;

export default index;
export { sha, sha1, sha224, sha256, sha384, sha512 };

//# sourceMappingURL=npm:sha.js@2.4.11!cjs.map