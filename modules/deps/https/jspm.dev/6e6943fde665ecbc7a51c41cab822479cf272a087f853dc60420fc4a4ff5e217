import _minimalisticAssert from '/npm:minimalistic-assert@1!cjs';
import '/npm:inherits@2!cjs';
import { e as exports$3, a as exports$4 } from './npm:hash.js@1.1.7/_/d70f5bf3.js';
import './npm:hash.js@1.1.7/_/1e588aae.js';
import _ from './npm:hash.js@1.1.7/lib/hash/sha/1!cjs';
import _3 from './npm:hash.js@1.1.7/lib/hash/sha/256!cjs';
import _2 from './npm:hash.js@1.1.7/lib/hash/sha/224!cjs';
import _5 from './npm:hash.js@1.1.7/lib/hash/sha/512!cjs';
import _4 from './npm:hash.js@1.1.7/lib/hash/sha/384!cjs';
import exports$5 from './npm:hash.js@1.1.7/lib/hash/ripemd!cjs';

var exports = {};
exports.sha1 = _;
exports.sha224 = _2;
exports.sha256 = _3;
exports.sha384 = _4;
exports.sha512 = _5;

var exports$1 = {};
var utils = exports$3;
var assert = _minimalisticAssert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}

exports$1 = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize); // Add padding to key

  for (var i = key.length; i < this.blockSize; i++) key.push(0);

  for (i = 0; i < key.length; i++) key[i] ^= 54;

  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a

  for (i = 0; i < key.length; i++) key[i] ^= 106;

  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

var _hmac = exports$1;

var exports$2 = {};
var hash = exports$2;
hash.utils = exports$3;
hash.common = exports$4;
hash.sha = exports;
hash.ripemd = exports$5;
hash.hmac = _hmac; // Proxy hash functions to the main object

hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

export default exports$2;

//# sourceMappingURL=npm:hash.js@1.1.7!cjs.map