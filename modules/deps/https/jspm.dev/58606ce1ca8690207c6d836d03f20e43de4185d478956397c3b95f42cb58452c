import _xhr from '/npm:xhr@2!cjs';

var exports = {};
exports = getResponse;

function getResponse(opt, resp) {
  if (!resp) return null;
  return {
    statusCode: resp.statusCode,
    headers: resp.headers,
    method: opt.method,
    url: opt.url,
    // the XHR object in browser, http response in Node
    rawRequest: resp.rawRequest ? resp.rawRequest : resp
  };
}

var _normalizeResponse = exports;

var exports$1 = {};
var xhr = _xhr;
var normalize = _normalizeResponse;

var noop = function () {};

exports$1 = xhrRequest;

function xhrRequest(opt, cb) {
  delete opt.uri; // for better JSON.parse error handling than xhr module

  var useJson = false;

  if (opt.responseType === "json") {
    opt.responseType = "text";
    useJson = true;
  }

  var req = xhr(opt, function xhrRequestResult(err, resp, body) {
    if (useJson && !err) {
      try {
        var text = resp.rawRequest.responseText;
        body = JSON.parse(text);
      } catch (e) {
        err = e;
      }
    }

    resp = normalize(opt, resp);
    if (err) cb(err, null, resp);else cb(err, body, resp);
    cb = noop;
  }); // Patch abort() so that it also calls the callback, but with an error

  var onabort = req.onabort;

  req.onabort = function () {
    var ret = onabort.apply(req, Array.prototype.slice.call(arguments));
    cb(new Error("XHR Aborted"));
    cb = noop;
    return ret;
  };

  return req;
}

var _request = exports$1;

export default _request;

//# sourceMappingURL=request.js!cjs.map